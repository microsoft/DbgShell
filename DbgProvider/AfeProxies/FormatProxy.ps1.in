
function PROXY_NAME
{
    [CmdletBinding( HelpUri = 'HELP_URI' )]
    param( NON_SHARED_PARAM_1
           [Parameter( Position = 0 )]
           [System.Object[]] ${Property},

           NON_SHARED_PARAM_2
           [System.Object] ${GroupBy},

           [string] ${View},

           [switch] ${ShowError},

           [switch] ${DisplayError},

           [Alias( 'f' )]
           [switch] ${Force},

           [ValidateSet( 'CoreOnly', 'EnumOnly', 'Both' )]
           [string] ${Expand},

           [Parameter( ValueFromPipeline = $true )]
           [psobject] ${InputObject},

           [Parameter( Mandatory = $false )]
           [MS.Dbg.Formatting.IFormatInfo] ${FormatInfo}
         )

    begin
    {
        [bool] $private:originalColorSupport = $HostSupportsColor
        [bool] $private:useSuppliedView = $false
        [bool] $private:enableDebugSpew = $false
        if( ![string]::IsNullOrEmpty( $env:PROXY_SPEW_VAR ) )
        {
            $enableDebugSpew = $true
        }

        try
        {
            if( [string]::IsNullOrEmpty( $Expand ) )
            {
                $Expand = 'EnumOnly'
            }

            CURRENT_VIEW_DEF = $null
            $private:currentSteppablePipeline = $null

            $private:outBuffer = $null
            if( $PSBoundParameters.TryGetValue( 'OutBuffer', [ref] $outBuffer ) )
            {
                $PSBoundParameters[ 'OutBuffer' ] = 1
            }

            $private:tmp = $null
            if( $PSBoundParameters.TryGetValue( 'Expand', [ref] $tmp ) )
            {
                # Don't do enumeration recursively.
                $PSBoundParameters[ 'Expand' ] = 'CoreOnly'
            }

            if( $null -ne $FormatInfo )
            {
                $useSuppliedView = $true
            }
VIEW_FROM_PROPERTY_STUFF_BEGIN
        }
        catch
        {
            $e = $_
            [System.Console]::WriteLine( "OH NOES (PROXY_NAME begin): $e" )
            throw
        }
        finally { }
    } # end 'begin' block

    process
    {
        if( $enableDebugSpew )
        {
            [Console]::WriteLine( "        ======== PROXY_NAME proxy: process ========" )
            [Console]::WriteLine( '        $PSBoundParameters:' )
            foreach( $key in $PSBoundParameters.Keys )
            {
                $val = $PSBoundParameters[ $key ]
                if( $null -eq $val ) { $val = "<null>" }
                [Console]::WriteLine( "            [$($key)]: $($val)" )
            }
        }
        try
        {
            $private:objToDealWith = $null
            [bool] $private:bindUsingInputObject = $false
            if( $null -eq $_ )
            {
                if( $enableDebugSpew )
                {
                    [Console]::WriteLine( "        SPEW_PREFIX: Dollar-underbar is null." )
                    [Console]::WriteLine( "        SPEW_PREFIX: `$InputObject is type: {0}", $InputObject.GetType().FullName )
                }
                $objToDealWith = $InputObject
                $bindUsingInputObject = $true
            }
            else
            {
                if( $enableDebugSpew )
                {
                    [Console]::WriteLine( "        SPEW_PREFIX: Dollar-underbar object of type: {0}", $_.GetType().FullName )
                }
                $objToDealWith = $_
                # Things get messed up in the child steppable pipeline if both $_ and
                # $InputObject are set. (I don't know why; they're both set here...)
                [void] $PSBoundParameters.Remove( 'InputObject' )
            }

            if( $null -eq $objToDealWith ) # TODO: Do I need to handle [System.Management.Automation.Internal.AutomationNull]::Value?
            {
                return
            }

            # If -Expand Both, then we always format the current object as a list, then
            # enumerate it and apply the desired formatting to those.
            [bool] $private:skipNormalFormatting = $false

            $private:enumerable = GetEnumerable $objToDealWith
            if( $null -ne $enumerable )
            {
                if( $Expand -eq 'CoreOnly' )
                {
                    # Nothing to do. Proceed as normal.
                }
                elseif( $Expand -eq 'EnumOnly' )
                {
                    $null = $PSBoundParameters.Remove( 'InputObject' )
                    $PSBoundParameters[ 'Expand' ] = 'CoreOnly'
                    Enumerate $enumerable | PROXY_NAME @PSBoundParameters
                    return
                }
                elseif( $Expand -eq 'Both' )
                {
                    "The following object supports IEnumerable:`n"
                    # This matches the behavior of built-in F+O.
                    $skipNormalFormatting = $true
                    Format-List -InputObject $objToDealWith -Expand CoreOnly
                }
                else
                {
                    # Should be impossible to get here.
                    throw "Unexpected `$Expand value: $($Expand)."
                }
            } # end if( it's enumerable )


            if( !$skipNormalFormatting )
            {
                $private:_formatInfo = $null

                if( $useSuppliedView )
                {
                    ${_formatInfo} = $FormatInfo
                }
VIEW_FROM_PROPERTY_STUFF_PROCESS
                else
                {
                    ${_formatInfo} = Get-AltFormatViewDef -ForObject $objToDealWith `
                                                          -FormatInfoType ([MS.Dbg.Formatting.PROXY_VIEW_TYPE_NAME])
                }

                if( $null -eq ${_formatInfo} )
                {
                    if( ($null -ne CURRENT_VIEW_DEF) -or ($null -eq $currentSteppablePipeline) )
                    {
                        # Need to start up a PROXY_NAME pipeline
                        if( $null -ne $currentSteppablePipeline )
                        {
                            $currentSteppablePipeline.End()
                        }

                        $global:HostSupportsColor = $false
                        FORMAT_WRAPPED_COMMAND = $ExecutionContext.InvokeCommand.GetCommand( 'PROXY_NAME', [System.Management.Automation.CommandTypes]::Cmdlet )

                        FORMAT_SCRIPT_COMMAND = { & FORMAT_WRAPPED_COMMAND @PSBoundParameters | OutStringColorShim -Stream | TrimStream }
                        #FORMAT_SCRIPT_COMMAND = { & FORMAT_WRAPPED_COMMAND @PSBoundParameters }
                        $currentSteppablePipeline = FORMAT_SCRIPT_COMMAND.GetSteppablePipeline( $myInvocation.CommandOrigin )
                        $currentSteppablePipeline.Begin( $PSCmdlet )
                    }
                    # else we keep using the $currentSteppablePipeline
                }
                else
                {
                    if( ($null -eq CURRENT_VIEW_DEF) -or
                        (CURRENT_VIEW_DEF -ne ${_formatInfo}) )
                    {
                        # Need to start up a new pipeline for the new _formatInfo.
                        if( $null -ne $currentSteppablePipeline )
                        {
                            $currentSteppablePipeline.End()
                            $global:HostSupportsColor = $originalColorSupport
                        }

                        $private:fullCmdName = 'Debugger\Format-AltPROXY_SHAPE'

                        $private:formatCmd = $ExecutionContext.InvokeCommand.GetCommand( $fullCmdName, [System.Management.Automation.CommandTypes]::All )

                        [void] $PSBoundParameters.Remove( 'FormatInfo' ) # in case it was explicitly passed.
                        $private:scriptCmd = { & $formatCmd -FormatInfo ${_formatInfo} @PSBoundParameters }
                        $currentSteppablePipeline = $scriptCmd.GetSteppablePipeline( $myInvocation.CommandOrigin )
                        $currentSteppablePipeline.Begin( $PSCmdlet )
                    }
                }

                # TODO: Assert $null -ne $currentSteppablePipeline
                CURRENT_VIEW_DEF = ${_formatInfo}
                if( $bindUsingInputObject )
                {
                    $currentSteppablePipeline.Process( $null )
                }
                else
                {
                    $currentSteppablePipeline.Process( $objToDealWith )
                }
            } # end if( !$skipNormalFormatting )

            if( ($null -ne $enumerable) -and ($Expand -eq 'Both') )
            {
                if( $null -ne $currentSteppablePipeline )
                {
                    # We need to end this first. The built-in Out-Default does not like to
                    # be recursive, and if we wait until after we do the enumeration to
                    # end this pipeline, when we end the Out-Default, it sends out some
                    # GroupEnd and FormatEnd formatting objects, and they get unhappy.
                    $currentSteppablePipeline.End()
                    $currentSteppablePipeline = $null
                }

                # The built-in F+O counts how many objects in the enumerable to put into this message. Why do that?
                "`nThe IEnumerable contains the following objects:`n"
                #foreach( $eItem in $enumerable )
                #{
                #    $PSBoundParameters[ 'InputObject' ] = $eItem
                #    $PSBoundParameters[ 'Expand' ] = 'CoreOnly'
                #    PROXY_NAME @PSBoundParameters
                #}

                [void] $PSBoundParameters.Remove( 'InputObject' )
                $PSBoundParameters[ 'Expand' ] = 'CoreOnly'
                Enumerate $enumerable | PROXY_NAME @PSBoundParameters
            } # end if( $enumerable )
        }
        catch
        {
            $e = $_
            [System.Console]::WriteLine( "OH NOES (PROXY_NAME process): $e" )
            $global:HostSupportsColor = $originalColorSupport
            throw
        }
        finally { }
    } # end 'process' block

    end
    {
        try
        {
            if( $null -ne $currentSteppablePipeline )
            {
                $currentSteppablePipeline.End()
            }
        }
        catch
        {
            $e = $_
            [System.Console]::WriteLine( "OH NOES (PROXY_NAME end): $e" )
            throw
        }
        finally
        {
            $global:HostSupportsColor = $originalColorSupport
        }
    } # end 'end' block
<#
.ForwardHelpTargetName PROXY_NAME
.ForwardHelpCategory Cmdlet
#>
} # end PROXY_NAME proxy

